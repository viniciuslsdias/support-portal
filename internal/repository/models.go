// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Categories string

const (
	CategoriesSoftware Categories = "software"
	CategoriesHardware Categories = "hardware"
	CategoriesLogin    Categories = "login"
	CategoriesOther    Categories = "other"
)

func (e *Categories) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Categories(s)
	case string:
		*e = Categories(s)
	default:
		return fmt.Errorf("unsupported scan type for Categories: %T", src)
	}
	return nil
}

type NullCategories struct {
	Categories Categories
	Valid      bool // Valid is true if Categories is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategories) Scan(value interface{}) error {
	if value == nil {
		ns.Categories, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Categories.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategories) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Categories), nil
}

type Priorities string

const (
	PrioritiesLow      Priorities = "low"
	PrioritiesMedium   Priorities = "medium"
	PrioritiesHigh     Priorities = "high"
	PrioritiesCritical Priorities = "critical"
)

func (e *Priorities) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Priorities(s)
	case string:
		*e = Priorities(s)
	default:
		return fmt.Errorf("unsupported scan type for Priorities: %T", src)
	}
	return nil
}

type NullPriorities struct {
	Priorities Priorities
	Valid      bool // Valid is true if Priorities is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPriorities) Scan(value interface{}) error {
	if value == nil {
		ns.Priorities, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Priorities.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPriorities) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Priorities), nil
}

type Ticket struct {
	ID                  int64
	FullName            sql.NullString
	EmailAddress        sql.NullString
	IssueCategory       Categories
	Priority            Priorities
	IssueSummary        sql.NullString
	DetailedDescription sql.NullString
	CreatedAt           time.Time
	UpdatedAt           time.Time
}
