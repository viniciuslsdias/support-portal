// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const createTicket = `-- name: CreateTicket :exec

INSERT INTO tickets (
    full_name, 
    email_address, 
    issue_category, 
    priority, 
    issue_summary, 
    detailed_description, 
    created_at, 
    updated_at
) VALUES (
    $1, 
    $2, 
    $3,
    $4,
    $5, 
    $6, 
    now(), 
    now()
)
`

type CreateTicketParams struct {
	FullName            sql.NullString
	EmailAddress        sql.NullString
	IssueCategory       Categories
	Priority            Priorities
	IssueSummary        sql.NullString
	DetailedDescription sql.NullString
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) error {
	_, err := q.db.Exec(ctx, createTicket,
		arg.FullName,
		arg.EmailAddress,
		arg.IssueCategory,
		arg.Priority,
		arg.IssueSummary,
		arg.DetailedDescription,
	)
	return err
}

const getAllTickets = `-- name: GetAllTickets :many
SELECT id, full_name, email_address, issue_category, priority, issue_summary, detailed_description, created_at, updated_at FROM tickets
`

func (q *Queries) GetAllTickets(ctx context.Context) ([]Ticket, error) {
	rows, err := q.db.Query(ctx, getAllTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.EmailAddress,
			&i.IssueCategory,
			&i.Priority,
			&i.IssueSummary,
			&i.DetailedDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicket = `-- name: GetTicket :one
SELECT id, full_name, email_address, issue_category, priority, issue_summary, detailed_description, created_at, updated_at FROM tickets 
WHERE id = $1
`

func (q *Queries) GetTicket(ctx context.Context, id int64) (Ticket, error) {
	row := q.db.QueryRow(ctx, getTicket, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.EmailAddress,
		&i.IssueCategory,
		&i.Priority,
		&i.IssueSummary,
		&i.DetailedDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
